name: Build

on:
  push:
    tags: ['*.*.*']

env:
#  GLPI_VERSION: ${GITHUB_REF#refs/tags/}
  GLPI_VERSION: 9.5.6
  DOCKER_IMAGE_GLPI: ppcm/glpi
  DOCKER_IMAGE_GLPI_CRON: ppcm/glpi-cron

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: Version match
        uses: actions-ecosystem/action-regex-match@v2
        id: version-match
        with:
#          text: ${GITHUB_REF#refs/tags/}
          text: '9.5.6-1'
          regex: '^([0-9]+)\.([0-9]+)\.([0-9]+)-([0-9]+)$'

      - name: Prepare
        id: prep
        run: |
          VERSION=${GITHUB_SHA::8}

          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          TAGS_GLPI="${{ env.DOCKER_IMAGE_GLPI }}:${VERSION}"
          TAGS_GLPI_CRON="${{ env.DOCKER_IMAGE_GLPI_CRON }}:${VERSION}"

          echo "Version : ${GITHUB_REF#refs/tags/}"
          echo "Match : ${{ steps.version-match.outputs.match }}"
          
          if [[ "${{ steps.version-match.outputs.match }}" != '' ]]; then
            VERSION_LVL1="${{ steps.version-match.outputs.group1 }}"
            VERSION_LVL2="${VERSION_LVL1}.${{ steps.version-match.outputs.group2 }}"
            VERSION_LVL3="${VERSION_LVL2}.${{ steps.version-match.outputs.group3 }}"
            VERSION_LVL4="${VERSION_LVL3}-${{ steps.version-match.outputs.group4 }}"
            TAGS_GLPI="${{ env.DOCKER_IMAGE_GLPI }}:latest,${{ env.DOCKER_IMAGE_GLPI }}:${VERSION_LVL1},${{ env.DOCKER_IMAGE_GLPI }}:${VERSION_LVL2},${{ env.DOCKER_IMAGE_GLPI }}:${VERSION_LVL3},${{ env.DOCKER_IMAGE_GLPI }}:${VERSION_LVL4}"
            TAGS_GLPI_CRON="${{ env.DOCKER_IMAGE_GLPI_CRON }}:latest,${{ env.DOCKER_IMAGE_GLPI_CRON }}:${VERSION_LVL1},${{ env.DOCKER_IMAGE_GLPI_CRON }}:${VERSION_LVL2},${{ env.DOCKER_IMAGE_GLPI_CRON }}:${VERSION_LVL3},${{ env.DOCKER_IMAGE_GLPI_CRON }}:${VERSION_LVL4}"
          fi

          echo "GLPI : ${TAGS_GLPI}"
          echo "GLPI_CRON : ${TAGS_GLPI_CRON}"

          # Set output parameters.
          echo ::set-output name=tags_glpi::${TAGS_GLPI}
          echo ::set-output name=tags_glpi_cron::${TAGS_GLPI_CRON}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build GLPI
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./glpi
          file: ./glpi/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm
          push: true
          tags: ${{ steps.prep.outputs.tags_glpi }}

      - name: Build GLPI CRON
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./glpi
          file: ./glpi/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm
          push: true
          tags: ${{ steps.prep.outputs.tags_glpi_cron }}